
 <h2> Jumbotron:</h2>   
 <h3> Shittiest website ever made,  with pathetic bouncing circle cuz I was bored. Click on below if you want, with abs no warranty </h3>


<canvas id="canvas" align=center width="1200" height="600" style="position:absolute; z-index: 50"></canvas>

<script>
window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
                              window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

(function(root){
 var canvas = document.getElementById("canvas");
 var context = canvas.getContext('2d');


  function Circle(x,y,r, ctx, canvas, click){
    this.cx = x;
    this.cy = y;
    this.r = r;
    this.context = ctx;
    this.canvas = canvas;
    this.click = click;
  }

  Circle.prototype.draw = function() {
    this.context.beginPath();
    this.context.arc(this.cx, this.cy, this.r, 0, 2 * Math.PI, true); 
    this.context.lineWidth = 4;
    this.context.strokeStyle = '#aeaeae';
    this.context.stroke();
  };

  Circle.prototype.update = function() {
    this.r += 4;
  };

  Circle.prototype.collide = function() {
      if(this.cy < this.r && this.cx > 0){
        return new Circle(this.cx, 0, 15, this.context, this.canvas,false);
      }else if(this.cx < this.r && this.cy > 0){
        return new Circle(0, this.cy, 15, this.context, this.canvas,false);
      }else if(this.cx + this.r > this.canvas.width){
        return new Circle(this.canvas.height, this.context, 15, this.context, this.canvas,false);
      }else if(this.cy + this.r > this.canvas.height){
        return new Circle(this.cx, this.canvas.height,15, this.context, this.canvas,false);
      }
  };

  Circle.prototype.outOfBound = function() {
  	 if(this.r > this.canvas.height){
  	 	return true;
  	 }
  	 return false;
  };

function MyVisual(ctx, canvas){
  this.ctx = ctx;
  this.canvas = canvas;
  this.objs = [new Circle(200,200,30, ctx, canvas)];
  var that = this;
  $("#canvas").on("click", function(event){
    var rect = that.canvas.getBoundingClientRect();
    var x = event.clientX - rect.left;
    var y = event.clientY - rect.top;
    if(that.objs.length > 15) { that.objs.shift(); };
    that.objs.push(new Circle(x, y, 30, that.ctx, that.canvas,true));
  })
}

MyVisual.prototype.render = function(first_argument) {
  window.requestAnimationFrame(this.render.bind(this));
  this.ctx.clearRect(0,0, this.canvas.width, this.canvas.height);
  for(var i = 0; i < this.objs.length; i++){
	  this.objs[i].draw();
	  this.objs[i].update();
	    if(this.objs[i].click){
        var child = this.objs[i].collide();
        if(child){
          this.objs[i].click = false;
          this.objs.push(child);
          if(this.objs.length > 10){
              this.objs.shift();
          }
        }
	    }
	  }
};



var v = new MyVisual(context, canvas);
v.render();

})(this);


</script>